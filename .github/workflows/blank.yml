# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
import React, { useState } from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  TextInput,
  StyleSheet,
  SafeAreaView,
  StatusBar,
  Dimensions,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

const { width, height } = Dimensions.get('window');

export default function App() {
  const [currentScreen, setCurrentScreen] = useState('onboarding');
  const [userType, setUserType] = useState('');
  const [currentCard, setCurrentCard] = useState(0);
  const [matches, setMatches] = useState([]);

  // Sample data
  const athleteCards = [
    {
      id: 1,
      name: "Jake Martinez",
      photo: "https://placehold.co/400x600/2BD673/white?text=Jake+M",
      position: "SS/2B",
      gradYear: "2025",
      height: "5'11\"",
      weight: "175 lbs",
      gpa: "3.8",
      exitVelo: "92 mph",
      sixtyTime: "6.8s",
      throwVelo: "84 mph",
    },
    {
      id: 2,
      name: "Marcus Johnson",
      photo: "https://placehold.co/400x600/1A73E8/white?text=Marcus+J",
      position: "OF",
      gradYear: "2026",
      height: "6'2\"",
      weight: "185 lbs",
      gpa: "3.6",
      exitVelo: "89 mph",
      sixtyTime: "6.5s",
      throwVelo: "87 mph",
    }
  ];

  const coachCards = [
    {
      id: 1,
      name: "Coach Thompson",
      school: "State University",
      division: "D1",
      logo: "https://placehold.co/100x100/0B0F1A/white?text=SU",
      needs: "Middle Infield, Pitching"
    }
  ];

  const matchesList = [
    {
      id: 1,
      name: "Coach Thompson",
      school: "State University",
      lastMessage: "Great swing mechanics! Let's schedule a call.",
      time: "2h ago",
      avatar: "https://placehold.co/50x50/0B0F1A/white?text=CT"
    },
    {
      id: 2,
      name: "Coach Williams",
      school: "Tech College",
      lastMessage: "Interested in your 60-yard time...",
      time: "1d ago",
      avatar: "https://placehold.co/50x50/2BD673/white?text=CW"
    }
  ];

  const OnboardingScreen = () => (
    <SafeAreaView style={styles.container}>
      <View style={styles.onboardingContainer}>
        <View style={styles.logoContainer}>
          <LinearGradient
            colors={['#2BD673', '#1A73E8']}
            style={styles.logo}
          >
            <Text style={styles.logoText}>PL</Text>
          </LinearGradient>
          <Text style={styles.appTitle}>PlayerLooks</Text>
          <Text style={styles.appSubtitle}>Connect coaches and athletes through smart recruiting</Text>
        </View>
        
        <View style={styles.buttonContainer}>
          <TouchableOpacity 
            style={[styles.button, styles.athleteButton]}
            onPress={() => {setUserType('athlete'); setCurrentScreen('athleteProfile');}}
          >
            <Text style={styles.buttonText}>I'm an Athlete</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.button, styles.coachButton]}
            onPress={() => {setUserType('coach'); setCurrentScreen('coachProfile');}}
          >
            <Text style={styles.buttonText}>I'm a Coach</Text>
          </TouchableOpacity>
        </View>
        
        <Text style={styles.termsText}>
          By continuing, you agree to our Terms of Service and Privacy Policy
        </Text>
      </View>
    </SafeAreaView>
  );

  const AthleteProfileSetup = () => (
    <SafeAreaView style={styles.container}>
      <LinearGradient
        colors={['#2BD673', '#1A73E8']}
        style={styles.header}
      >
        <Text style={styles.headerTitle}>Create Your Profile</Text>
        <Text style={styles.headerSubtitle}>Show coaches what makes you special</Text>
      </LinearGradient>
      
      <ScrollView style={styles.profileForm}>
        <View style={styles.photoContainer}>
          <View style={styles.photoPlaceholder}>
            <Text style={styles.photoText}>Add Photo</Text>
          </View>
        </View>
        
        <View style={styles.formContainer}>
          <TextInput style={styles.input} placeholder="Full Name" />
          <View style={styles.row}>
            <View style={styles.halfInput}>
              <TextInput style={styles.input} placeholder="Position" />
            </View>
            <View style={styles.halfInput}>
              <TextInput style={styles.input} placeholder="Grad Year" />
            </View>
          </View>
          
          <View style={styles.row}>
            <View style={styles.halfInput}>
              <TextInput style={styles.input} placeholder="Height" />
            </View>
            <View style={styles.halfInput}>
              <TextInput style={styles.input} placeholder="Weight" />
            </View>
          </View>
          
          <TextInput style={styles.input} placeholder="GPA" />
          
          <View style={styles.metricsContainer}>
            <Text style={styles.sectionTitle}>Baseball Metrics</Text>
            <View style={styles.metricsGrid}>
              <TextInput style={styles.metricInput} placeholder="Exit Velo (mph)" />
              <TextInput style={styles.metricInput} placeholder="60-yard (sec)" />
              <TextInput style={styles.metricInput} placeholder="Throw Velo (mph)" />
              <TextInput style={styles.metricInput} placeholder="Bat Speed (mph)" />
            </View>
          </View>
          
          <View style={styles.videoContainer}>
            <Text style={styles.sectionTitle}>Free Video Upload</Text>
            <Text style={styles.videoSubtitle}>Upload one highlight video (swing, throw, or game footage)</Text>
            <TouchableOpacity style={styles.videoButton}>
              <Text style={styles.videoButtonText}>üìπ Upload Video</Text>
            </TouchableOpacity>
          </View>
        </View>
        
        <TouchableOpacity 
          style={styles.completeButton}
          onPress={() => setCurrentScreen('swipe')}
        >
          <LinearGradient
            colors={['#2BD673', '#1A73E8']}
            style={styles.gradientButton}
          >
            <Text style={styles.buttonText}>Complete Profile</Text>
          </LinearGradient>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );

  const SwipeScreen = () => {
    const currentCardData = userType === 'coach' ? athleteCards[currentCard] : coachCards[0];
    
    const handleSwipe = (direction) => {
      if (direction === 'right') {
        setMatches([...matches, currentCardData]);
      }
      setCurrentCard((prev) => (prev + 1) % athleteCards.length);
    };

    return (
      <SafeAreaView style={styles.container}>
        {/* Header */}
        <View style={styles.swipeHeader}>
          <View style={styles.miniLogo}>
            <LinearGradient
              colors={['#2BD673', '#1A73E8']}
              style={styles.miniLogoGradient}
            >
              <Text style={styles.miniLogoText}>PL</Text>
            </LinearGradient>
          </View>
          <Text style={styles.swipeTitle}>Discover</Text>
          <TouchableOpacity style={styles.settingsButton}>
            <Text>‚öôÔ∏è</Text>
          </TouchableOpacity>
        </View>

        {/* Card */}
        <View style={styles.cardContainer}>
          {userType === 'coach' ? (
            <View style={styles.athleteCard}>
              <View style={styles.cardImageContainer}>
                <Image 
                  source={{ uri: currentCardData?.photo }} 
                  style={styles.cardImage}
                />
                <LinearGradient
                  colors={['transparent', 'rgba(0,0,0,0.7)']}
                  style={styles.cardOverlay}
                >
                  <Text style={styles.cardName}>{currentCardData?.name}</Text>
                  <Text style={styles.cardInfo}>
                    {currentCardData?.position} ‚Ä¢ Class of {currentCardData?.gradYear}
                  </Text>
                </LinearGradient>
                <TouchableOpacity style={styles.playButton}>
                  <Text style={styles.playButtonText}>‚ñ∂Ô∏è</Text>
                </TouchableOpacity>
              </View>
              
              <View style={styles.cardMetrics}>
                <View style={styles.metricsRow}>
                  <View style={[styles.metricChip, styles.greenChip]}>
                    <Text style={styles.metricLabel}>EXIT VELO</Text>
                    <Text style={styles.metricValue}>{currentCardData?.exitVelo}</Text>
                  </View>
                  <View style={[styles.metricChip, styles.blueChip]}>
                    <Text style={styles.metricLabel}>60-YARD</Text>
                    <Text style={styles.metricValue}>{currentCardData?.sixtyTime}</Text>
                  </View>
                </View>
                <View style={styles.metricsRow}>
                  <View style={[styles.metricChip, styles.purpleChip]}>
                    <Text style={styles.metricLabel}>THROW VELO</Text>
                    <Text style={styles.metricValue}>{currentCardData?.throwVelo}</Text>
                  </View>
                  <View style={[styles.metricChip, styles.orangeChip]}>
                    <Text style={styles.metricLabel}>GPA</Text>
                    <Text style={styles.metricValue}>{currentCardData?.gpa}</Text>
                  </View>
                </View>
                <Text style={styles.physicalStats}>
                  {currentCardData?.height} ‚Ä¢ {currentCardData?.weight}
                </Text>
              </View>
            </View>
          ) : (
            <View style={styles.coachCard}>
              <Image 
                source={{ uri: currentCardData?.logo }} 
                style={styles.coachLogo}
              />
              <Text style={styles.coachName}>{currentCardData?.name}</Text>
              <Text style={styles.coachSchool}>{currentCardData?.school}</Text>
              <View style={styles.divisionBadge}>
                <Text style={styles.divisionText}>{currentCardData?.division}</Text>
              </View>
              <View style={styles.needsContainer}>
                <Text style={styles.needsTitle}>Recruiting Needs</Text>
                <Text style={styles.needsText}>{currentCardData?.needs}</Text>
              </View>
            </View>
          )}
        </View>

        {/* Swipe Buttons */}
        <View style={styles.swipeButtons}>
          <TouchableOpacity 
            style={[styles.swipeButton, styles.rejectButton]}
            onPress={() => handleSwipe('left')}
          >
            <Text style={styles.rejectText}>‚úï</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={[styles.swipeButton, styles.likeButton]}
            onPress={() => handleSwipe('right')}
          >
            <Text style={styles.likeText}>‚ô•</Text>
          </TouchableOpacity>
        </View>

        {/* Bottom Navigation */}
        <View style={styles.bottomNav}>
          <TouchableOpacity 
            style={styles.navItem}
            onPress={() => setCurrentScreen('swipe')}
          >
            <Text style={styles.navIcon}>üî•</Text>
            <Text style={[styles.navLabel, styles.activeNavLabel]}>Discover</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.navItem}
            onPress={() => setCurrentScreen('matches')}
          >
            <Text style={styles.navIcon}>üí¨</Text>
            <Text style={styles.navLabel}>Matches</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={styles.navItem}
            onPress={() => setCurrentScreen('profile')}
          >
            <Text style={styles.navIcon}>üë§</Text>
            <Text style={styles.navLabel}>Profile</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  };

  const MatchesScreen = () => (
    <SafeAreaView style={styles.container}>
      <LinearGradient
        colors={['#2BD673', '#1A73E8']}
        style={styles.header}
      >
        <Text style={styles.headerTitle}>Your Matches</Text>
        <Text style={styles.headerSubtitle}>{matches.length + matchesList.length} connections made</Text>
      </LinearGradient>
      
      <ScrollView style={styles.matchesList}>
        {matchesList.map(match => (
          <TouchableOpacity 
            key={match.id}
            style={styles.matchItem}
            onPress={() => setCurrentScreen('chat')}
          >
            <Image 
              source={{ uri: match.avatar }} 
              style={styles.matchAvatar}
            />
            <View style={styles.matchInfo}>
              <View style={styles.matchHeader}>
                <Text style={styles.matchName}>{match.name}</Text>
                <Text style={styles.matchTime}>{match.time}</Text>
              </View>
              <Text style={styles.matchSchool}>{match.school}</Text>
              <Text style={styles.matchMessage}>{match.lastMessage}</Text>
            </View>
            <View style={styles.onlineIndicator} />
          </TouchableOpacity>
        ))}
        
        {matchesList.length === 0 && (
          <View style={styles.emptyState}>
            <Text style={styles.emptyIcon}>‚öæ</Text>
            <Text style={styles.emptyTitle}>No matches yet</Text>
            <Text style={styles.emptySubtitle}>Keep swiping to find your perfect recruiting match!</Text>
          </View>
        )}
      </ScrollView>

      {/* Bottom Navigation */}
      <View style={styles.bottomNav}>
        <TouchableOpacity 
          style={styles.navItem}
          onPress={() => setCurrentScreen('swipe')}
        >
          <Text style={styles.navIcon}>üî•</Text>
          <Text style={styles.navLabel}>Discover</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={styles.navItem}
          onPress={() => setCurrentScreen('matches')}
        >
          <Text style={styles.navIcon}>üí¨</Text>
          <Text style={[styles.navLabel, styles.activeNavLabel]}>Matches</Text>
        </TouchableOpacity>
        <TouchableOpacity 
          style={styles.navItem}
          onPress={() => setCurrentScreen('profile')}
        >
          <Text style={styles.navIcon}>üë§</Text>
          <Text style={styles.navLabel}>Profile</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );

  // Screen Router
  const renderScreen = () => {
    switch(currentScreen) {
      case 'onboarding': return <OnboardingScreen />;
      case 'athleteProfile': return <AthleteProfileSetup />;
      case 'swipe': return <SwipeScreen />;
      case 'matches': return <MatchesScreen />;
      default: return <OnboardingScreen />;
    }
  };

  return (
    <>
      <StatusBar barStyle="light-content" />
      {renderScreen()}
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  onboardingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 24,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 48,
  },
  logo: {
    width: 96,
    height: 96,
    borderRadius: 48,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 32,
  },
  logoText: {
    color: '#fff',
    fontSize: 32,
    fontWeight: 'bold',
  },
  appTitle: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#111',
    marginBottom: 8,
  },
  appSubtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  buttonContainer: {
    width: '100%',
    marginBottom: 32,
  },
  button: {
    width: '100%',
    paddingVertical: 16,
    borderRadius: 12,
    marginBottom: 16,
    alignItems: 'center',
  },
  athleteButton: {
    backgroundColor: '#2BD673',
  },
  coachButton: {
    backgroundColor: '#1A73E8',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  termsText: {
    fontSize: 12,
    color: '#999',
    textAlign: 'center',
  },
  header: {
    paddingHorizontal: 24,
    paddingVertical: 32,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'rgba(255,255,255,0.8)',
  },
  profileForm: {
    flex: 1,
    paddingHorizontal: 24,
    paddingVertical: 24,
  },
  photoContainer: {
    alignItems: 'center',
    marginBottom: 24,
  },
  photoPlaceholder: {
    width: 128,
    height: 128,
    backgroundColor: '#f0f0f0',
    borderRadius: 64,
    justifyContent: 'center',
    alignItems: 'center',
  },
  photoText: {
    color: '#999',
  },
  formContainer: {
    marginBottom: 24,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 16,
    marginBottom: 16,
    fontSize: 16,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  halfInput: {
    width: '48%',
  },
  metricsContainer: {
    backgroundColor: '#f8faff',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111',
    marginBottom: 12,
  },
  metricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  metricInput: {
    width: '48%',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    marginBottom: 12,
    fontSize: 14,
  },
  videoContainer: {
    backgroundColor: '#f0fff4',
    padding: 16,
    borderRadius: 12,
  },
  videoSubtitle: {
    fontSize: 14,
    color: '#666',
    marginBottom: 12,
  },
  videoButton: {
    backgroundColor: '#2BD673',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  videoButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '500',
  },
  completeButton: {
    marginBottom: 24,
  },
  gradientButton: {
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  swipeHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingVertical: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  miniLogo: {
    width: 32,
    height: 32,
  },
  miniLogoGradient: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  miniLogoText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  swipeTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#111',
  },
  settingsButton: {
    width: 32,
    height: 32,
    backgroundColor: '#f0f0f0',
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  cardContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 16,
  },
  athleteCard: {
    width: width - 32,
    backgroundColor: '#fff',
    borderRadius: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
    overflow: 'hidden',
  },
  cardImageContainer: {
    position: 'relative',
  },
  cardImage: {
    width: '100%',
    height: 400,
  },
  cardOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    paddingHorizontal: 24,
    paddingVertical: 24,
  },
  cardName: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  cardInfo: {
    color: 'rgba(255,255,255,0.9)',
    fontSize: 16,
  },
  playButton: {
    position: 'absolute',
    top: 16,
    right: 16,
    width: 48,
    height: 48,
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  playButtonText: {
    color: '#fff',
    fontSize: 20,
  },
  cardMetrics: {
    padding: 24,
  },
  metricsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  metricChip: {
    flex: 1,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    marginHorizontal: 6,
  },
  greenChip: {
    backgroundColor: '#f0fff4',
  },
  blueChip: {
    backgroundColor: '#f0f8ff',
  },
  purpleChip: {
    backgroundColor: '#faf0ff',
  },
  orangeChip: {
    backgroundColor: '#fff8f0',
  },
  metricLabel: {
    fontSize: 10,
    fontWeight: '600',
    color: '#666',
    marginBottom: 2,
  },
  metricValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#111',
  },
  physicalStats: {
    textAlign: 'center',
    color: '#666',
    fontSize: 14,
    marginTop: 8,
  },
  coachCard: {
    width: width - 32,
    backgroundColor: '#fff',
    borderRadius: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
    padding: 24,
    alignItems: 'center',
  },
  coachLogo: {
    width: 96,
    height: 96,
    borderRadius: 48,
    marginBottom: 16,
  },
  coachName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#111',
    marginBottom: 4,
  },
  coachSchool: {
    fontSize: 16,
    color: '#1A73E8',
    fontWeight: '600',
    marginBottom: 8,
  },
  divisionBadge: {
    backgroundColor: '#f0f8ff',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 16,
    marginBottom: 24,
  },
  divisionText: {
    color: '#1A73E8',
    fontSize: 14,
    fontWeight: '500',
  },
  needsContainer: {
    backgroundColor: '#f8f8f8',
    padding: 16,
    borderRadius: 12,
    width: '100%',
  },
  needsTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111',
    marginBottom: 8,
  },
  needsText: {
    color: '#666',
    fontSize: 14,
  },
  swipeButtons: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 32,
  },
  swipeButton: {
    width: 64,
    height: 64,
    borderRadius: 32,
    backgroundColor: '#fff',
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
  },
  rejectButton: {
    borderWidth: 2,
    borderColor: '#ffebee',
  },
  likeButton: {
    borderWidth: 2,
    borderColor: '#e8f5e8',
  },
  rejectText: {
    color: '#f44336',
    fontSize: 24,
  },
  likeText: {
    color: '#2BD673',
    fontSize: 24,
  },
  bottomNav: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    paddingVertical: 12,
  },
  navItem: {
    alignItems: 'center',
    paddingVertical: 8,
  },
  navIcon: {
    fontSize: 24,
    marginBottom: 4,
  },
  navLabel: {
    fontSize: 12,
    color: '#999',
  },
  activeNavLabel: {
    color: '#2BD673',
    fontWeight: '500',
  },
  matchesList: {
    flex: 1,
    paddingHorizontal: 24,
    paddingVertical: 16,
  },
  matchItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  matchAvatar: {
    width: 48,
    height: 48,
    borderRadius: 24,
    marginRight: 16,
  },
  matchInfo: {
    flex: 1,
  },
  matchHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 4,
  },
  matchName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111',
  },
  matchTime: {
    fontSize: 12,
    color: '#999',
  },
  matchSchool: {
    fontSize: 14,
    color: '#666',
    marginBottom: 2,
  },
  matchMessage: {
    fontSize: 14,
    color: '#999',
  },
  onlineIndicator: {
    width: 12,
    height: 12,
    backgroundColor: '#2BD673',
    borderRadius: 6,
    marginLeft: 8,
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 48,
  },
  emptyIcon: {
    fontSize: 64,
    marginBottom: 16,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#111',
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
});
